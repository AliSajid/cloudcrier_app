---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloudcrier-app

  An application to periodically access the weather APIs
  and get the prediction and current weather data.

Globals:
  Function:
    Tracing: Active
    Runtime: python3.12
    Handler: app.lambda_handler
    Timeout: 60
    MemorySize: 128
    Architectures:
      - arm64
    LoggingConfig:
      LogFormat: JSON
      LogGroup: /aws/applications/cloudcrier_app
  Api:
    TracingEnabled: true

Resources:
  ## EventBridge rule to schedule the weather check every hour
  HourlyWeatherCheckRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt QueuingFunction.Arn
          Id: QueuingFunction

  ## SQS Queue to manage weather data requests
  WeatherQueueNWS:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: weather-queue-nws.fifo
      FifoQueue: true
      Tags:
        - Key: Name
          Value: WeatherQueueNWS
        - Key: Service
          Value: National Weather Service
        - Key: Environment
          Value: Production
        - Key: Application
          Value: CloudCrier
        - Key: Management
          Value: AWS SAM
        - Key: Managed
          Value: "true"

  WeatherQueueOW:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: weather-queue-ow.fifo
      FifoQueue: true
      Tags:
        - Key: Name
          Value: WeatherQueueOW
        - Key: Service
          Value: OpenWeather API
        - Key: Environment
          Value: Production
        - Key: Application
          Value: CloudCrier
        - Key: Management
          Value: AWS SAM
        - Key: Managed
          Value: "true"

  ## Lambda function that adds cities and weather API tasks to the SQS queue
  QueuingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cloudcrier-app/queue_actions/
      Environment:
        Variables:
          NWS_QUEUE_NAME: !GetAtt WeatherQueueNWS.QueueName
          OW_QUEUE_NAME: !GetAtt WeatherQueueOW.QueueName
      Events:
        HourlyEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)

  ## Lambda function to handle NWS API requests
  NWSApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cloudcrier-app/check_nws_api/
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt WeatherQueueNWS.QueueName
      Events:
        NWSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WeatherQueueNWS.Arn
            BatchSize: 5
            Enabled: true

  ## Lambda function to handle OpenWeather API requests
  OpenWeatherApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cloudcrier-app/check_openweather_api/
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt WeatherQueueOW.QueueName
      Events:
        OWQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WeatherQueueOW.Arn
            BatchSize: 5
            Enabled: true

  ## DynamoDB table to store city input information
  CityInputTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ## DynamoDB table to store the weather data fetched from APIs
  WeatherDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: weather-data
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ## Application Insights and Monitoring
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WeatherQueueNWS:
    Description: "NWS Weather Queue"
    Value: !Ref WeatherQueueNWS
    Export:
      Name: !Sub "${AWS::StackName}-WeatherQueueNWS"

  WeatherQueueOW:
    Description: "OW Weather Queue"
    Value: !Ref WeatherQueueOW
    Export:
      Name: !Sub "${AWS::StackName}-WeatherQueueOW"

  QueuingFunctionArn:
    Description: "The ARN of the Queuing Lambda Function"
    Value: !GetAtt QueuingFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-QueuingFunctionArn"

  NWSApiFunctionArn:
    Description: "The ARN of the NWS API Lambda Function"
    Value: !GetAtt NWSApiFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NWSApiFunctionArn"

  OpenWeatherApiFunctionArn:
    Description: "The ARN of the OpenWeather API Lambda Function"
    Value: !GetAtt OpenWeatherApiFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-OpenWeatherApiFunctionArn"

  QueuingFunctionLogGroup:
    Description: "The CloudWatch Log Group for the Queuing Lambda Function"
    Value: !Sub "/aws/lambda/${QueuingFunction}"

  NWSApiFunctionLogGroup:
    Description: "The CloudWatch Log Group for the NWS API Lambda Function"
    Value: !Sub "/aws/lambda/${NWSApiFunction}"

  OpenWeatherApiFunctionLogGroup:
    Description: "The CloudWatch Log Group for the OpenWeather API Lambda Function"
    Value: !Sub "/aws/lambda/${OpenWeatherApiFunction}"

  CityInputTableName:
    Description: "The name of the DynamoDB City Input Table"
    Value: !Ref CityInputTable
    Export:
      Name: !Sub "${AWS::StackName}-CityInputTableName"

  WeatherDataTableName:
    Description: "The name of the DynamoDB Weather Data Table"
    Value: !Ref WeatherDataTable
    Export:
      Name: !Sub "${AWS::StackName}-WeatherDataTableName"

  HourlyWeatherCheckRuleArn:
    Description: "The ARN of the EventBridge rule that triggers the weather check every hour"
    Value: !GetAtt HourlyWeatherCheckRule.Arn
    Export:
      Name: !Sub "${AWS::StackName}-HourlyWeatherCheckRuleArn"

  ApplicationInsightsArn:
    Description: "The ARN of the Application Insights resource"
    Value: !GetAtt ApplicationInsightsMonitoring.ApplicationARN
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationInsightsArn"

  ApplicationResourceGroupName:
    Description: "The name of the Resource Group for Application Insights"
    Value: !Ref ApplicationResourceGroup
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationResourceGroupName"
